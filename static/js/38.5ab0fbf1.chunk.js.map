{"version":3,"sources":["components/_dashboard/user/UserDetailsForm.js","pages/dashboard/UserDetails.js"],"names":["UserDetailsForm","currentUser","userSpecialPermissions","parameterSettings","navigate","useNavigate","enqueueSnackbar","useSnackbar","role","displayMaxCoverage","max_coverage","settings","default_coverage","formik","useFormik","enableReinitialize","initialValues","name","email","password","gender","coverage","location","coordinates","fixedLocation","phoneNumber","address","country","state","city","zipCode","avatarUrl","serverConfig","baseUrl","isVerified","status","online","onlineStatus","username","note","credit","balance","onSubmit","values","a","setSubmitting","resetForm","setErrors","fakeRequest","axios","put","variant","PATH_DASHBOARD","user","list","console","error","errors","touched","handleSubmit","setFieldValue","getFieldProps","value","noValidate","autoComplete","Grid","container","spacing","item","xs","md","Card","sx","py","px","Label","color","textTransform","position","top","right","Box","mb","Avatar","src","FormHelperText","textAlign","FormControlLabel","labelPlacement","control","Switch","disabled","onChange","event","target","checked","label","Typography","mx","width","justifyContent","p","Stack","direction","sm","TextField","inputProps","readOnly","fullWidth","select","SelectProps","native","multiline","minRows","maxRows","UserDetails","themeStretch","useSettings","dispatch","useDispatch","userId","useParams","useSelector","userList","specialPermissionList","find","paramCase","_id","specialPermssion","setting","settingsList","settingRow","type","useEffect","getUserList","getSpecialPermssionList","getSettingsList","Page","title","Container","maxWidth","HeaderBreadcrumbs","heading","links","href","root","UserSpecialPermissionsForm"],"mappings":"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","file":"static/js/38.5ab0fbf1.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useSnackbar } from 'notistack5';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, FormikProvider, useFormik } from 'formik';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Grid,\r\n  Stack,\r\n  Switch,\r\n  TextField,\r\n  Typography,\r\n  FormHelperText,\r\n  FormControlLabel,\r\n  Avatar\r\n} from '@material-ui/core';\r\n// utils\r\nimport axios from '../../../utils/axios';\r\nimport fakeRequest from '../../../utils/fakeRequest';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n//\r\nimport Label from '../../Label';\r\nimport { serverConfig } from '../../../config';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nUserDetailsForm.propTypes = {\r\n  currentUser: PropTypes.object,\r\n  userSpecialPermissions: PropTypes.object,\r\n  parameterSettings: PropTypes.object\r\n};\r\n\r\nexport default function UserDetailsForm({ currentUser, userSpecialPermissions, parameterSettings }) {\r\n  const navigate = useNavigate();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const role = currentUser\r\n    ? ((currentUser.role === 'user' || currentUser.role === 's-user') && userSpecialPermissions && 's-user') ||\r\n      currentUser.role\r\n    : '';\r\n  const displayMaxCoverage =\r\n    (userSpecialPermissions && userSpecialPermissions.max_coverage) ||\r\n    (parameterSettings && parameterSettings.settings.default_coverage) ||\r\n    150;\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      name: currentUser?.name || '',\r\n      email: currentUser?.email || '',\r\n      password: '',\r\n      gender: currentUser && currentUser.gender > -1 ? currentUser.gender : '',\r\n      role: role || '',\r\n      coverage: currentUser?.coverage || 50,\r\n      max_coverage: displayMaxCoverage,\r\n      location: currentUser ? `${currentUser.location.coordinates[1]}, ${currentUser.location.coordinates[0]}` : '',\r\n      fixedLocation: currentUser?.fixedLocation || '',\r\n      phoneNumber: currentUser?.phoneNumber || '',\r\n      address: currentUser?.address || '',\r\n      country: currentUser?.country || '',\r\n      state: currentUser?.state || '',\r\n      city: currentUser?.city || '',\r\n      zipCode: currentUser?.zipCode || '',\r\n      avatarUrl: (currentUser && `${serverConfig.baseUrl}/user/img-src/${currentUser.avatarUrl}`) || null,\r\n      isVerified: currentUser?.isVerified || true,\r\n      status: currentUser?.status,\r\n      online: currentUser?.online || false,\r\n      onlineStatus: (currentUser?.online && 'online') || 'offline',\r\n      username: currentUser?.username || '',\r\n      note: currentUser?.note || '',\r\n      credit: currentUser?.credit || '0 %',\r\n      balance: currentUser?.balance || '$ 0'\r\n    },\r\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\r\n      try {\r\n        await fakeRequest(500);\r\n\r\n        await axios.put(`/user/manage-users?username=${values.username}`, values);\r\n\r\n        resetForm();\r\n        setSubmitting(false);\r\n        enqueueSnackbar('Update success', { variant: 'success' });\r\n        navigate(PATH_DASHBOARD.user.list);\r\n      } catch (error) {\r\n        console.error(error);\r\n        setSubmitting(false);\r\n        setErrors(error);\r\n      }\r\n    }\r\n  });\r\n\r\n  const { errors, values, touched, handleSubmit, setFieldValue, getFieldProps } = formik;\r\n\r\n  return (\r\n    <FormikProvider value={formik}>\r\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={4}>\r\n            <Card sx={{ py: 10, px: 3 }}>\r\n              <Label\r\n                color={values.status !== 'active' ? 'error' : 'success'}\r\n                sx={{ textTransform: 'uppercase', position: 'absolute', top: 24, right: 24 }}\r\n              >\r\n                {values.status}\r\n              </Label>\r\n\r\n              <Box sx={{ mb: 5 }}>\r\n                <Avatar src={values.avatarUrl} />\r\n                <FormHelperText error sx={{ px: 2, textAlign: 'center' }}>\r\n                  {touched.avatarUrl && errors.avatarUrl}\r\n                </FormHelperText>\r\n              </Box>\r\n\r\n              <FormControlLabel\r\n                labelPlacement=\"start\"\r\n                control={\r\n                  <Switch\r\n                    disabled\r\n                    onChange={(event) => setFieldValue('status', event.target.checked ? 'banned' : 'active')}\r\n                    checked={values.status !== 'active'}\r\n                  />\r\n                }\r\n                label={\r\n                  <>\r\n                    <Typography variant=\"subtitle2\" sx={{ mb: 0.5 }}>\r\n                      Banned\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n                      Apply disable account\r\n                    </Typography>\r\n                  </>\r\n                }\r\n                sx={{ mx: 0, mb: 3, width: 1, justifyContent: 'space-between' }}\r\n              />\r\n\r\n              <FormControlLabel\r\n                labelPlacement=\"start\"\r\n                control={<Switch disabled {...getFieldProps('isVerified')} checked={values.isVerified} />}\r\n                label={\r\n                  <>\r\n                    <Typography variant=\"subtitle2\" sx={{ mb: 0.5 }}>\r\n                      Email Verified\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n                      Disabling this will automatically send the user a verification email\r\n                    </Typography>\r\n                  </>\r\n                }\r\n                sx={{ mx: 0, width: 1, justifyContent: 'space-between' }}\r\n              />\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={8}>\r\n            <Card sx={{ p: 3 }}>\r\n              <Stack spacing={3}>\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField\r\n                    disabled\r\n                    inputProps={{ readOnly: true }}\r\n                    fullWidth\r\n                    label=\"Email\"\r\n                    {...getFieldProps('email')}\r\n                  />\r\n                  <TextField\r\n                    disabled\r\n                    inputProps={{ readOnly: true }}\r\n                    fullWidth\r\n                    label=\"Nickname\"\r\n                    {...getFieldProps('name')}\r\n                  />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField\r\n                    select\r\n                    fullWidth\r\n                    label=\"Gender\"\r\n                    {...getFieldProps('gender')}\r\n                    SelectProps={{ native: true }}\r\n                    disabled\r\n                  >\r\n                    <option value=\"\" />\r\n                    <option key=\"male\" value=\"0\">\r\n                      Male\r\n                    </option>\r\n                    <option key=\"female\" value=\"1\">\r\n                      Female\r\n                    </option>\r\n                    <option key=\"business\" value=\"2\">\r\n                      Business\r\n                    </option>\r\n                  </TextField>\r\n                  <TextField disabled fullWidth label=\"Role\" {...getFieldProps('role')} />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField disabled fullWidth label=\"Credit\" {...getFieldProps('credit')} />\r\n                  <TextField disabled fullWidth label=\"Balance\" {...getFieldProps('balance')} />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField disabled fullWidth label=\"Status\" {...getFieldProps('onlineStatus')} />\r\n                  <TextField disabled fullWidth label=\"Punishment\" {...getFieldProps('punishment')} />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField disabled fullWidth label=\"Coverage\" {...getFieldProps('coverage')} />\r\n                  <TextField disabled fullWidth label=\"Max Coverage\" {...getFieldProps('max_coverage')} />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField disabled fullWidth label=\"Location\" {...getFieldProps('country')} />\r\n                  <TextField disabled fullWidth label=\"Latitude and logintude\" {...getFieldProps('location')} />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField disabled fullWidth label=\"Registration Date\" {...getFieldProps('created')} />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField\r\n                    disabled\r\n                    fullWidth\r\n                    label=\"Note\"\r\n                    multiline\r\n                    minRows={4}\r\n                    maxRows={4}\r\n                    {...getFieldProps('note')}\r\n                  />\r\n                </Stack>\r\n              </Stack>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Form>\r\n    </FormikProvider>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\r\nimport { paramCase } from 'change-case';\r\nimport { useParams } from 'react-router-dom';\r\n// material\r\nimport { Container } from '@material-ui/core';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getUserList, getSpecialPermssionList } from '../../redux/slices/user';\r\nimport { getSettingsList } from '../../redux/slices/settings';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport useSettings from '../../hooks/useSettings';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport UserDetailsForm from '../../components/_dashboard/user/UserDetailsForm';\r\nimport UserSpecialPermissionsForm from '../../components/_dashboard/user/UserSpecialPermissionsForm';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function UserDetails() {\r\n  const { themeStretch } = useSettings();\r\n  const dispatch = useDispatch();\r\n  const { userId } = useParams();\r\n  const { userList, specialPermissionList } = useSelector((state) => state.user);\r\n  const currentUser = userList.find((user) => paramCase(user._id) === userId);\r\n  const userSpecialPermissions = specialPermissionList.find(\r\n    (specialPermssion) => paramCase(specialPermssion.userId) === userId\r\n  );\r\n  const readOnly = true;\r\n\r\n  const { settingsList } = useSelector((state) => state.setting);\r\n  const parameterSettings = settingsList.find((settingRow) => settingRow.type === 'parameter');\r\n\r\n  useEffect(() => {\r\n    dispatch(getUserList());\r\n    dispatch(getSpecialPermssionList());\r\n    dispatch(getSettingsList());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Page title=\"User: Create a new user | Locals\">\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"User Details\"\r\n          links={[\r\n            { name: 'Dashboard', href: PATH_DASHBOARD.root },\r\n            { name: 'User', href: PATH_DASHBOARD.user.list },\r\n            { name: `${currentUser && currentUser.name}` }\r\n          ]}\r\n        />\r\n\r\n        <UserDetailsForm\r\n          currentUser={currentUser}\r\n          userSpecialPermissions={userSpecialPermissions}\r\n          parameterSettings={parameterSettings}\r\n        />\r\n        {userSpecialPermissions && (\r\n          <UserSpecialPermissionsForm\r\n            readOnly={readOnly}\r\n            currentUser={currentUser}\r\n            userSpecialPermissions={userSpecialPermissions}\r\n          />\r\n        )}\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"],"sourceRoot":""}