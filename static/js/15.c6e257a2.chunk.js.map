{"version":3,"sources":["components/HeaderBreadcrumbs.js","utils/fakeRequest.js","components/SearchNotFound.js","utils/getFileFormat.js","components/EmojiPicker.js","components/LightboxModal.js","components/_dashboard/privatechat/ChatContactSearch.js","components/_dashboard/privatechat/ChatConversationItem.js","components/_dashboard/privatechat/ChatConversationList.js","components/_dashboard/privatechat/ChatHeaderCompose.js","components/_dashboard/privatechat/ChatHeaderDetail.js","components/_dashboard/privatechat/ChatMessageInput.js","components/_dashboard/privatechat/ChatMessageItem.js","components/_dashboard/privatechat/ChatMessageList.js","components/_dashboard/privatechat/ChatRoomAttachment.js","components/_dashboard/privatechat/ChatRoomOneParticipant.js","components/_dashboard/privatechat/ChatRoomPopup.js","components/_dashboard/privatechat/ChatRoomGroupParticipant.js","components/_dashboard/privatechat/ChatRoom.js","components/_dashboard/privatechat/ChatSidebar.js","components/_dashboard/privatechat/ChatWindow.js","components/_dashboard/privatechat/ChatAdminMessageForm.js","pages/dashboard/PrivateChat.js"],"names":["HeaderBreadcrumbs","links","action","heading","moreLink","sx","other","mb","display","alignItems","flexGrow","variant","gutterBottom","flexShrink","mt","isString","href","target","map","noWrap","fakeRequest","time","Promise","res","setTimeout","SearchNotFound","searchQuery","align","FORMAT_IMG","FORMAT_VIDEO","FORMAT_WORD","FORMAT_EXCEL","FORMAT_POWERPOINT","FORMAT_PDF","FORMAT_PHOTOSHOP","FORMAT_ILLUSTRATOR","getFileType","fileUrl","split","pop","getFileName","substring","lastIndexOf","replace","getFileFullName","getIcon","name","component","src","alt","width","height","getFileThumb","thumb","format","includes","getFileFormat","Icon","icon","fileFill","RootStyle","styled","position","PickerStyle","theme","bottom","overflow","left","spacing","boxShadow","customShadows","z20","borderRadius","shape","borderRadiusMd","border","backgroundColor","palette","background","paper","color","text","disabled","primary","borderColor","divider","grey","typography","body2","opacity","fill","subtitle2","backdropFilter","WebkitBackdropFilter","alpha","selected","outline","secondary","EmojiPicker","emojiPicker","value","setValue","alignRight","useTheme","useState","emojiPickerState","SetEmojiPicker","main","title","emoji","onSelect","native","onClickAway","right","size","onClick","e","preventDefault","smilingFaceFill","useStyles","makeStyles","isRTL","direction","backgroundIcon","iconName","backgroundSize","backgroundPosition","backgroundRepeat","backgroundImage","createStyles","root","padding","justifyContent","marginLeft","borderRadiusSm","LightboxModal","images","photoIndex","setPhotoIndex","isOpen","onClose","classes","useEffect","document","body","style","toolbarButtons","length","mainSrc","nextSrc","prevSrc","onCloseRequest","onMovePrevRequest","onMoveNextRequest","reactModalStyle","overlay","zIndex","wrapperClassName","marginTop","SearchStyle","OutlinedInput","transition","transitions","create","easing","easeInOut","duration","shorter","z8","borderWidth","ChatContactSearch","query","onChange","onFocus","ClickAwayListener","FormControl","fullWidth","placeholder","startAdornment","InputAdornment","Box","searchFill","ListItemButton","AvatarWrapperStyle","ChatConversationItem","isSelected","opponent","conversation","onSelectConversation","isOpenSidebar","user","useAuth","displayLastActivity","created","avatarImgSrc","serverConfig","baseUrl","avatarUrl","opponentStatus","online","unreadCount","lastMessage","users_see_message","indexOf","_id","unread_count","isUnread","disableGutters","bgcolor","ListItemAvatar","className","Avatar","BadgeStatus","status","ListItemText","primaryTypographyProps","message","secondaryTypographyProps","ml","flexDirection","fontSize","lineHeight","whiteSpace","formatDistanceToNowStrict","Date","addSuffix","Badge","badgeContent","ChatConversationList","conversations","activeConversationId","onlyUnreadShow","navigate","useNavigate","userList","useSelector","state","opponentId","useParams","getConversationByUserId","userId","find","byId","users","localUsers","filter","result","toLowerCase","List","disablePadding","conversationUserId","PATH_DASHBOARD","chat","private","minWidth","minHeight","OneAvatar","participants","participant","undefined","avatar","Typography","capitalCase","fToNow","lastActivity","GroupAvatar","AvatarGroup","max","id","Link","underline","arrowIosForwardFill","ChatHeaderDetail","isGroup","moreVerticalFill","paddingLeft","MessageImgStyle","cursor","objectFit","ChatMessageInput","conversationId","onSend","messageMaxLen","fileInputRef","useDispatch","useRef","setMessage","imageFiles","setImageFiles","uploadImgs","setUploadImgs","handleSend","a","imgs","axios","post","data","messageId","uuidv4","senderId","senderName","messageType","receiverId","Stack","xs","sm","img","url","index","Input","disableUnderline","onKeyUp","event","key","inputProps","maxLength","endAdornment","mr","IconButton","current","click","roundAddPhotoAlternate","Divider","orientation","flexItem","mx","roundSend","type","multiple","ref","accept","fileObj","fileArray","formData","FormData","push","files","i","file","append","URL","createObjectURL","marginBottom","ContentStyle","maxWidth","neutral","InfoStyle","ChatMessageItem","onOpenLightbox","sender","sender_id","senderDetails","isMe","firstName","createdAt","dangerouslySetInnerHTML","__html","ChatMessageList","scrollRef","openLightbox","setOpenLightbox","selectedImage","setSelectedImage","scrollTop","scrollHeight","messages","join","handleOpenLightbox","findIndex","Scrollbar","scrollableNodeProps","p","paddingBottom","Button","overline","wordWrap","marginRight","borderLeft","borderRight","top","borderTopLeftRadius","borderBottomLeftRadius","ChatSidebar","isMobile","useMediaQuery","breakpoints","down","openSidebar","setOpenSidebar","setSearchQuery","setSearchResults","setSearchFocused","privatechat","setOnlyUnreadShow","handleChangeSearch","get","params","response","results","console","error","py","px","arrowIosBackFill","FormControlLabel","control","Checkbox","checked","label","ChatWindow","socket","dispatch","pathname","useLocation","contacts","recipients","conversationSelector","parameterSettings","setting","settingsList","settingRow","getSettingsList","displayParticipants","item","log","getConversation","emit","JSON","stringify","chatId","handleSendMessage","onSendMessage","sender_name","chat_id","receiver_id","message_type","Number","settings","message_limit_character_num","ChatAdminMessageForm","chatSettings","enqueueSnackbar","useSnackbar","ChatAdminMessageSchema","Yup","admin_message","required","formik","useFormik","enableReinitialize","initialValues","validationSchema","onSubmit","values","setSubmitting","resetForm","setErrors","put","errors","touched","handleSubmit","isSubmitting","getFieldProps","setFieldValue","noValidate","autoComplete","Grid","container","md","Card","TextField","multiline","minRows","maxRows","Boolean","helperText","LoadingButton","loading","PrivateChat","themeStretch","useSettings","currentConversationId","setCurrentCoversationId","onConnectChat","getUserList","getConversations","getContacts","setSocket","newSocket","socketio","connect","socketUrl","transports","on","handleReceiveMessage","handleDeleteMessage","onTyping","close","setRoomListSocket","handleUpdateChatRoomList","Page","Container"],"mappings":"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","file":"static/js/15.c6e257a2.chunk.js","sourcesContent":["import { isString } from 'lodash';\r\nimport PropTypes from 'prop-types';\r\n// material\r\nimport { Box, Typography, Link } from '@material-ui/core';\r\n//\r\nimport { MBreadcrumbs } from './@material-extend';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nHeaderBreadcrumbs.propTypes = {\r\n  links: PropTypes.array,\r\n  action: PropTypes.node,\r\n  heading: PropTypes.string.isRequired,\r\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  sx: PropTypes.object\r\n};\r\n\r\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\r\n  return (\r\n    <Box sx={{ mb: 5, ...sx }}>\r\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n        <Box sx={{ flexGrow: 1 }}>\r\n          <Typography variant=\"h4\" gutterBottom>\r\n            {heading}\r\n          </Typography>\r\n          <MBreadcrumbs links={links} {...other} />\r\n        </Box>\r\n\r\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\r\n      </Box>\r\n\r\n      <Box sx={{ mt: 2 }}>\r\n        {isString(moreLink) ? (\r\n          <Link href={moreLink} target=\"_blank\" variant=\"body2\">\r\n            {moreLink}\r\n          </Link>\r\n        ) : (\r\n          moreLink.map((href) => (\r\n            <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'table' }}>\r\n              {href}\r\n            </Link>\r\n          ))\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","// ----------------------------------------------------------------------\r\n\r\nexport default function fakeRequest(time) {\r\n  return new Promise((res) => setTimeout(res, time));\r\n}\r\n","import PropTypes from 'prop-types';\r\n// material\r\nimport { Paper, Typography } from '@material-ui/core';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nSearchNotFound.propTypes = {\r\n  searchQuery: PropTypes.string\r\n};\r\n\r\nexport default function SearchNotFound({ searchQuery = '', ...other }) {\r\n  return (\r\n    <Paper {...other}>\r\n      <Typography gutterBottom align=\"center\" variant=\"subtitle1\">\r\n        Not found\r\n      </Typography>\r\n      <Typography variant=\"body2\" align=\"center\">\r\n        No results found for &nbsp;\r\n        <strong>&quot;{searchQuery}&quot;</strong>. Try checking for typos or using complete words.\r\n      </Typography>\r\n    </Paper>\r\n  );\r\n}\r\n","// material\r\nimport { Box } from '@material-ui/core';\r\n//\r\nimport { Icon } from '@iconify/react';\r\nimport fileFill from '@iconify/icons-eva/file-fill';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst FORMAT_IMG = ['jpg', 'jpeg', 'gif', 'bmp', 'png'];\r\nconst FORMAT_VIDEO = ['m4v', 'avi', 'mpg', 'mp4', 'webm'];\r\nconst FORMAT_WORD = ['doc', 'docx'];\r\nconst FORMAT_EXCEL = ['xls', 'xlsx'];\r\nconst FORMAT_POWERPOINT = ['ppt', 'pptx'];\r\nconst FORMAT_PDF = ['pdf'];\r\nconst FORMAT_PHOTOSHOP = ['psd'];\r\nconst FORMAT_ILLUSTRATOR = ['ai', 'esp'];\r\n\r\nexport function getFileType(fileUrl) {\r\n  return fileUrl.split('.').pop();\r\n}\r\n\r\nexport function getFileName(fileUrl) {\r\n  return fileUrl.substring(fileUrl.lastIndexOf('/') + 1).replace(/\\.[^/.]+$/, '');\r\n}\r\n\r\nexport function getFileFullName(fileUrl) {\r\n  return fileUrl.split('/').pop();\r\n}\r\n\r\nexport function getFileFormat(fileUrl) {\r\n  let format;\r\n\r\n  switch (fileUrl.includes(getFileType(fileUrl))) {\r\n    case FORMAT_IMG.includes(getFileType(fileUrl)):\r\n      format = 'image';\r\n      break;\r\n    case FORMAT_VIDEO.includes(getFileType(fileUrl)):\r\n      format = 'video';\r\n      break;\r\n    case FORMAT_WORD.includes(getFileType(fileUrl)):\r\n      format = 'word';\r\n      break;\r\n    case FORMAT_EXCEL.includes(getFileType(fileUrl)):\r\n      format = 'excel';\r\n      break;\r\n    case FORMAT_POWERPOINT.includes(getFileType(fileUrl)):\r\n      format = 'powerpoint';\r\n      break;\r\n    case FORMAT_PDF.includes(getFileType(fileUrl)):\r\n      format = 'pdf';\r\n      break;\r\n    case FORMAT_PHOTOSHOP.includes(getFileType(fileUrl)):\r\n      format = 'photoshop';\r\n      break;\r\n    case FORMAT_ILLUSTRATOR.includes(getFileType(fileUrl)):\r\n      format = 'illustrator';\r\n      break;\r\n    default:\r\n      format = getFileType(fileUrl);\r\n  }\r\n\r\n  return format;\r\n}\r\n\r\nconst getIcon = (name) => (\r\n  <Box component=\"img\" src={`/static/icons/file/${name}.svg`} alt={name} sx={{ width: 28, height: 28 }} />\r\n);\r\n\r\nexport function getFileThumb(fileUrl) {\r\n  let thumb;\r\n  switch (getFileFormat(fileUrl)) {\r\n    case 'image':\r\n      thumb = <Box component=\"img\" src={fileUrl} alt={fileUrl} sx={{ width: 1, height: 1 }} />;\r\n      break;\r\n    case 'video':\r\n      thumb = getIcon('file_type_video');\r\n      break;\r\n    case 'word':\r\n      thumb = getIcon('file_type_word');\r\n      break;\r\n    case 'excel':\r\n      thumb = getIcon('file_type_excel');\r\n      break;\r\n    case 'powerpoint':\r\n      thumb = getIcon('file_type_powerpoint');\r\n      break;\r\n    case 'pdf':\r\n      thumb = getIcon('file_type_pdf');\r\n      break;\r\n    case 'photoshop':\r\n      thumb = getIcon('file_type_photoshop');\r\n      break;\r\n    case 'illustrator':\r\n      thumb = getIcon('file_type_ai');\r\n      break;\r\n    default:\r\n      thumb = <Box component={Icon} icon={fileFill} sx={{ width: 28, height: 28 }} />;\r\n  }\r\n  return thumb;\r\n}\r\n","import 'emoji-mart/css/emoji-mart.css';\r\nimport PropTypes from 'prop-types';\r\nimport { Picker } from 'emoji-mart';\r\nimport { Icon } from '@iconify/react';\r\nimport { useState } from 'react';\r\nimport smilingFaceFill from '@iconify/icons-eva/smiling-face-fill';\r\n// material\r\nimport { alpha, useTheme, styled } from '@material-ui/core/styles';\r\nimport { IconButton, ClickAwayListener } from '@material-ui/core';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled('div')({\r\n  position: 'relative'\r\n});\r\n\r\nconst PickerStyle = styled('div')(({ theme }) => ({\r\n  bottom: 40,\r\n  overflow: 'hidden',\r\n  position: 'absolute',\r\n  left: theme.spacing(-2),\r\n  boxShadow: theme.customShadows.z20,\r\n  borderRadius: theme.shape.borderRadiusMd,\r\n  '& .emoji-mart': {\r\n    border: 'none',\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  '& .emoji-mart-anchor': {\r\n    color: theme.palette.text.disabled,\r\n    '&:hover, &:focus, &.emoji-mart-anchor-selected': {\r\n      color: theme.palette.text.primary\r\n    }\r\n  },\r\n  '& .emoji-mart-bar': { borderColor: theme.palette.divider },\r\n  '& .emoji-mart-search input': {\r\n    backgroundColor: 'transparent',\r\n    color: theme.palette.text.primary,\r\n    borderColor: theme.palette.grey[500_32],\r\n    '&::placeholder': {\r\n      ...theme.typography.body2,\r\n      color: theme.palette.text.disabled\r\n    }\r\n  },\r\n  '& .emoji-mart-search-icon svg': {\r\n    opacity: 1,\r\n    fill: theme.palette.text.disabled\r\n  },\r\n  '& .emoji-mart-category-label span': {\r\n    ...theme.typography.subtitle2,\r\n    backdropFilter: 'blur(8px)',\r\n    WebkitBackdropFilter: 'blur(8px)', // Fix on Mobile\r\n    color: theme.palette.text.primary,\r\n    backgroundColor: alpha(theme.palette.background.paper, 0.8)\r\n  },\r\n  '& .emoji-mart-title-label': { color: theme.palette.text.primary },\r\n  '& .emoji-mart-category .emoji-mart-emoji:hover:before': {\r\n    backgroundColor: theme.palette.action.selected\r\n  },\r\n  '& .emoji-mart-emoji': { outline: 'none' },\r\n  '& .emoji-mart-preview-name': {\r\n    color: theme.palette.text.primary\r\n  },\r\n  '& .emoji-mart-preview-shortname, .emoji-mart-preview-emoticon': {\r\n    color: theme.palette.text.secondary\r\n  }\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nEmojiPicker.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  value: PropTypes.string,\r\n  setValue: PropTypes.func,\r\n  alignRight: PropTypes.bool\r\n};\r\n\r\nexport default function EmojiPicker({ disabled, value, setValue, alignRight = false, ...other }) {\r\n  const theme = useTheme();\r\n  const [emojiPickerState, SetEmojiPicker] = useState(false);\r\n\r\n  let emojiPicker;\r\n  if (emojiPickerState) {\r\n    emojiPicker = (\r\n      <Picker\r\n        color={theme.palette.primary.main}\r\n        title=\"Pick your emoji…\"\r\n        emoji=\"point_up\"\r\n        onSelect={(emoji) => setValue(value + emoji.native)}\r\n      />\r\n    );\r\n  }\r\n\r\n  const triggerPicker = (e) => {\r\n    e.preventDefault();\r\n    SetEmojiPicker(!emojiPickerState);\r\n  };\r\n\r\n  const handleClickAway = () => {\r\n    SetEmojiPicker(false);\r\n  };\r\n\r\n  return (\r\n    <ClickAwayListener onClickAway={handleClickAway}>\r\n      <RootStyle {...other}>\r\n        <PickerStyle\r\n          sx={{\r\n            ...(alignRight && {\r\n              right: -2,\r\n              left: 'auto !important'\r\n            })\r\n          }}\r\n        >\r\n          {emojiPicker}\r\n        </PickerStyle>\r\n        <IconButton disabled={disabled} size=\"small\" onClick={triggerPicker}>\r\n          <Icon icon={smilingFaceFill} width={20} height={20} />\r\n        </IconButton>\r\n      </RootStyle>\r\n    </ClickAwayListener>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { useEffect } from 'react';\r\nimport Lightbox from 'react-image-lightbox';\r\n// material\r\nimport { makeStyles, createStyles } from '@material-ui/styles';\r\nimport { alpha } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n  const isRTL = theme.direction === 'rtl';\r\n\r\n  const backgroundIcon = (iconName) => ({\r\n    backgroundSize: '24px 24px',\r\n    backgroundPosition: 'center',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundColor: alpha(theme.palette.grey[900], 0.8),\r\n    backgroundImage: `url(\"/static/icons/controls/${iconName}.svg\")`\r\n  });\r\n\r\n  return createStyles({\r\n    root: {\r\n      backdropFilter: 'blur(8px)',\r\n      backgroundColor: alpha(theme.palette.grey[900], 0.88),\r\n\r\n      // Toolbar\r\n      '& .ril__toolbar': {\r\n        height: 'auto !important',\r\n        padding: theme.spacing(2, 3),\r\n        backgroundColor: 'transparent'\r\n      },\r\n      '& .ril__toolbarLeftSide': { display: 'none' },\r\n      '& .ril__toolbarRightSide': {\r\n        height: 'auto !important',\r\n        padding: 0,\r\n        flexGrow: 1,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '& li': {\r\n          display: 'flex',\r\n          alignItems: 'center'\r\n        },\r\n        '& li:first-of-type': {\r\n          flexGrow: 1\r\n        },\r\n        '& li:not(:first-of-type)': {\r\n          width: theme.spacing(5),\r\n          height: theme.spacing(5),\r\n          justifyContent: 'center',\r\n          marginLeft: theme.spacing(1),\r\n          borderRadius: theme.shape.borderRadius\r\n        }\r\n      },\r\n\r\n      // Button\r\n      '& button:focus': { outline: 'none' },\r\n      '& .ril__toolbarRightSide button': {\r\n        width: '100%',\r\n        height: '100%',\r\n        '&.ril__zoomInButton': backgroundIcon('maximize-outline'),\r\n        '&.ril__zoomOutButton': backgroundIcon('minimize-outline'),\r\n        '&.ril__closeButton': backgroundIcon('close')\r\n      },\r\n      '& .ril__navButtons': {\r\n        padding: theme.spacing(3),\r\n        borderRadius: theme.shape.borderRadiusSm,\r\n        '&.ril__navButtonPrev': {\r\n          left: theme.spacing(2),\r\n          right: 'auto',\r\n          ...backgroundIcon(isRTL ? 'arrow-ios-forward' : 'arrow-ios-back')\r\n        },\r\n        '&.ril__navButtonNext': {\r\n          right: theme.spacing(2),\r\n          left: 'auto',\r\n          ...backgroundIcon(isRTL ? 'arrow-ios-back' : 'arrow-ios-forward')\r\n        }\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nLightboxModal.propTypes = {\r\n  images: PropTypes.array.isRequired,\r\n  photoIndex: PropTypes.number,\r\n  setPhotoIndex: PropTypes.func,\r\n  isOpen: PropTypes.bool,\r\n  onClose: PropTypes.func\r\n};\r\n\r\nexport default function LightboxModal({ images, photoIndex, setPhotoIndex, isOpen, onClose, ...other }) {\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      document.body.style.overflow = 'hidden';\r\n    } else {\r\n      document.body.style.overflow = 'unset';\r\n    }\r\n  }, [isOpen]);\r\n\r\n  const showIndex = <Typography variant=\"subtitle2\">{`${photoIndex + 1} / ${images.length}`}</Typography>;\r\n\r\n  const toolbarButtons = [showIndex];\r\n  const customStyles = {\r\n    overlay: {\r\n      zIndex: 9999\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isOpen && (\r\n        <Lightbox\r\n          mainSrc={images[photoIndex]}\r\n          nextSrc={images[(photoIndex + 1) % images.length]}\r\n          prevSrc={images[(photoIndex + images.length - 1) % images.length]}\r\n          onCloseRequest={onClose}\r\n          onMovePrevRequest={() => setPhotoIndex((photoIndex + images.length - 1) % images.length)}\r\n          onMoveNextRequest={() => setPhotoIndex((photoIndex + 1) % images.length)}\r\n          toolbarButtons={toolbarButtons}\r\n          reactModalStyle={customStyles}\r\n          wrapperClassName={classes.root}\r\n          {...other}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport searchFill from '@iconify/icons-eva/search-fill';\r\n// material\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { Box, FormControl, OutlinedInput, InputAdornment, ClickAwayListener } from '@material-ui/core';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled('div')(({ theme }) => ({\r\n  marginTop: theme.spacing(2)\r\n}));\r\n\r\nconst SearchStyle = styled(OutlinedInput)(({ theme }) => ({\r\n  transition: theme.transitions.create('box-shadow', {\r\n    easing: theme.transitions.easing.easeInOut,\r\n    duration: theme.transitions.duration.shorter\r\n  }),\r\n  '&.Mui-focused': { boxShadow: theme.customShadows.z8 },\r\n  '& fieldset': {\r\n    borderWidth: `1px !important`,\r\n    borderColor: `${theme.palette.grey[500_32]} !important`\r\n  }\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChatContactSearch.propTypes = {\r\n  query: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  onFocus: PropTypes.func,\r\n  onClickAway: PropTypes.func\r\n};\r\n\r\nexport default function ChatContactSearch({ query, onChange, onFocus, onClickAway, ...other }) {\r\n  return (\r\n    <ClickAwayListener onClickAway={onClickAway}>\r\n      <RootStyle {...other}>\r\n        <FormControl fullWidth size=\"small\">\r\n          <SearchStyle\r\n            value={query}\r\n            onFocus={onFocus}\r\n            onChange={onChange}\r\n            placeholder=\"Search contacts...\"\r\n            startAdornment={\r\n              <InputAdornment position=\"start\">\r\n                <Box component={Icon} icon={searchFill} sx={{ color: 'text.disabled' }} />\r\n              </InputAdornment>\r\n            }\r\n          />\r\n        </FormControl>\r\n      </RootStyle>\r\n    </ClickAwayListener>\r\n  );\r\n}\r\n","import { last } from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport { formatDistanceToNowStrict } from 'date-fns';\r\n// material\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { Box, Avatar, ListItemText, ListItemAvatar, ListItemButton, Badge } from '@material-ui/core';\r\n//\r\nimport BadgeStatus from '../../BadgeStatus';\r\nimport { serverConfig } from '../../../config';\r\n// hooks\r\nimport useAuth from '../../../hooks/useAuth';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst AVATAR_SIZE = 48;\r\nconst AVATAR_SIZE_GROUP = 32;\r\n\r\nconst RootStyle = styled(ListItemButton)(({ theme }) => ({\r\n  padding: theme.spacing(1.5, 3),\r\n  transition: theme.transitions.create('all')\r\n}));\r\n\r\nconst AvatarWrapperStyle = styled('div')({\r\n  position: 'relative',\r\n  width: AVATAR_SIZE,\r\n  height: AVATAR_SIZE,\r\n  '& .MuiAvatar-img': { borderRadius: '50%' },\r\n  '& .MuiAvatar-root': { width: '100%', height: '100%' }\r\n});\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst getDetails = (conversation, currentUserId) => {\r\n  const otherParticipants = conversation.participants.filter((participant) => participant.id !== currentUserId);\r\n  const displayNames = otherParticipants.reduce((names, participant) => [...names, participant.name], []).join(', ');\r\n  let displayText = '';\r\n  const lastMessage = conversation.messages[conversation.messages.length - 1];\r\n  if (lastMessage) {\r\n    const sender = lastMessage.senderId === currentUserId ? 'You: ' : '';\r\n    const message = lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body;\r\n    displayText = `${sender}${message}`;\r\n  }\r\n  return { otherParticipants, displayNames, displayText };\r\n};\r\n\r\nChatConversationItem.propTypes = {\r\n  isSelected: PropTypes.bool,\r\n  opponent: PropTypes.object,\r\n  // conversation: PropTypes.object.isRequired,\r\n  isOpenSidebar: PropTypes.bool,\r\n  onSelectConversation: PropTypes.func\r\n};\r\n\r\nexport default function ChatConversationItem({\r\n  isSelected,\r\n  opponent,\r\n  conversation,\r\n  onSelectConversation,\r\n  isOpenSidebar,\r\n  ...other\r\n}) {\r\n  const { user } = useAuth();\r\n  // const displayLastActivity = last(conversation.messages).createdAt;\r\n  const displayLastActivity = opponent.created;\r\n  // const isGroup = details.otherParticipants.length > 1;\r\n  const isGroup = false;\r\n  // const isOnlineGroup = isGroup && details.otherParticipants.map((item) => item.status).includes('online');\r\n  const avatarImgSrc = `${serverConfig.baseUrl}/user/img-src/${opponent.avatarUrl}`;\r\n  const opponentStatus = opponent.online ? 'online' : 'offline';\r\n\r\n  const unreadCount =\r\n    (conversation &&\r\n      (conversation.lastMessage.users_see_message.indexOf(user._id) > -1\r\n        ? 0\r\n        : conversation.lastMessage.unread_count)) ||\r\n    0;\r\n  const isUnread = unreadCount > 0;\r\n\r\n  return (\r\n    <RootStyle\r\n      disableGutters\r\n      onClick={onSelectConversation}\r\n      sx={{\r\n        ...(isSelected && { bgcolor: 'action.selected' })\r\n      }}\r\n      {...other}\r\n    >\r\n      <ListItemAvatar>\r\n        <Box\r\n          sx={{\r\n            ...(isGroup && {\r\n              position: 'relative',\r\n              width: AVATAR_SIZE,\r\n              height: AVATAR_SIZE,\r\n              '& .avatarWrapper': {\r\n                position: 'absolute',\r\n                width: AVATAR_SIZE_GROUP,\r\n                height: AVATAR_SIZE_GROUP,\r\n                '&:nth-of-type(1)': {\r\n                  left: 0,\r\n                  zIndex: 9,\r\n                  bottom: 2,\r\n                  '& .MuiAvatar-root': {\r\n                    border: (theme) => `solid 2px ${theme.palette.background.paper}`\r\n                  }\r\n                },\r\n                '&:nth-of-type(2)': { top: 2, right: 0 }\r\n              }\r\n            })\r\n          }}\r\n        >\r\n          {/* {details.otherParticipants.slice(0, 2).map((participant) => ( */}\r\n          <AvatarWrapperStyle className=\"avatarWrapper\" key={opponent._id}>\r\n            <Avatar alt={opponent.name} src={avatarImgSrc} />\r\n            <BadgeStatus status={opponentStatus} sx={{ right: 2, bottom: 2, position: 'absolute' }} />\r\n          </AvatarWrapperStyle>\r\n          {/* ))} */}\r\n          {/* {opponent.online && <BadgeStatus status=\"online\" sx={{ right: 2, bottom: 2, position: 'absolute' }} />} */}\r\n        </Box>\r\n      </ListItemAvatar>\r\n\r\n      {isOpenSidebar && (\r\n        <>\r\n          <ListItemText\r\n            primary={opponent.name}\r\n            primaryTypographyProps={{\r\n              noWrap: true,\r\n              variant: 'subtitle2'\r\n            }}\r\n            secondary={conversation && conversation.lastMessage.message}\r\n            secondaryTypographyProps={{\r\n              noWrap: true,\r\n              variant: isUnread ? 'subtitle2' : 'body2',\r\n              color: isUnread ? 'textPrimary' : 'textSecondary'\r\n            }}\r\n          />\r\n\r\n          <Box\r\n            sx={{\r\n              ml: 2,\r\n              height: 44,\r\n              display: 'flex',\r\n              alignItems: 'flex-end',\r\n              flexDirection: 'column'\r\n            }}\r\n          >\r\n            <Box\r\n              sx={{\r\n                mb: 1.25,\r\n                fontSize: 12,\r\n                lineHeight: '22px',\r\n                whiteSpace: 'nowrap',\r\n                color: 'text.disabled'\r\n              }}\r\n            >\r\n              {formatDistanceToNowStrict(new Date(displayLastActivity), {\r\n                addSuffix: false\r\n              })}\r\n            </Box>\r\n            {/* {isUnread && <BadgeStatus status=\"unread\" size=\"small\" />} */}\r\n            {isUnread && <Badge color=\"secondary\" badgeContent={unreadCount} />}\r\n          </Box>\r\n        </>\r\n      )}\r\n    </RootStyle>\r\n  );\r\n}\r\n","import { find, map } from 'lodash';\r\nimport PropTypes from 'prop-types';\r\n// import { useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n// import socketio from 'socket.io-client';\r\n// material\r\nimport { List } from '@material-ui/core';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n//\r\nimport ChatConversationItem from './ChatConversationItem';\r\n// redux\r\nimport { useSelector } from '../../../redux/store';\r\n// hooks\r\nimport useAuth from '../../../hooks/useAuth';\r\n\r\n// import { serverConfig } from '../../../config';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChatConversationList.propTypes = {\r\n  conversations: PropTypes.object,\r\n  isOpenSidebar: PropTypes.bool,\r\n  activeConversationId: PropTypes.string,\r\n  query: PropTypes.string,\r\n  onlyUnreadShow: PropTypes.bool\r\n};\r\n\r\nexport default function ChatConversationList({\r\n  conversations,\r\n  isOpenSidebar,\r\n  activeConversationId,\r\n  query,\r\n  onlyUnreadShow,\r\n  ...other\r\n}) {\r\n  const navigate = useNavigate();\r\n  const { user } = useAuth();\r\n  const { userList } = useSelector((state) => state.user);\r\n  const { opponentId } = useParams();\r\n\r\n  const getConversationByUserId = (userId) => {\r\n    const conversation = find(conversations.byId, (value) => {\r\n      const userIds = map(value.users, (user) => user._id);\r\n      // console.log(userIds);\r\n      return userIds.indexOf(userId) > -1;\r\n    });\r\n    // console.log(userId, conversation);\r\n    return conversation;\r\n  };\r\n\r\n  const isUnread = (userId) => {\r\n    const conversation = getConversationByUserId(userId);\r\n    const unreadCount =\r\n      (conversation &&\r\n        (conversation.lastMessage.users_see_message.indexOf(user._id) > -1\r\n          ? 0\r\n          : conversation.lastMessage.unread_count)) ||\r\n      0;\r\n    return unreadCount > 0;\r\n  };\r\n\r\n  const localUsers = userList.filter((value) => {\r\n    const result = value._id !== user._id && value.name.toLowerCase().indexOf(query.toLowerCase()) > -1;\r\n    if (onlyUnreadShow && result) {\r\n      return isUnread(value._id);\r\n    }\r\n    return result;\r\n  });\r\n\r\n  const handleSelectConversation = (conversationUserId) => {\r\n    navigate(`${PATH_DASHBOARD.chat.private}/${conversationUserId}`);\r\n  };\r\n\r\n  return (\r\n    <List disablePadding {...other}>\r\n      {localUsers.map((value) => (\r\n        <ChatConversationItem\r\n          key={value._id}\r\n          opponent={value}\r\n          isOpenSidebar={isOpenSidebar}\r\n          conversation={getConversationByUserId(value._id)}\r\n          isSelected={opponentId === value._id}\r\n          onSelectConversation={() => handleSelectConversation(value._id)}\r\n          // sx={{ ...(onlyUnreadShow && isUnread(value._id) && { display: 'none' }) }}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport { useState } from 'react';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport match from 'autosuggest-highlight/match';\r\nimport checkmarkFill from '@iconify/icons-eva/checkmark-fill';\r\n// material\r\nimport { alpha, styled } from '@material-ui/core/styles';\r\nimport { Box, Avatar, TextField, Typography, Autocomplete, Chip } from '@material-ui/core';\r\n//\r\nimport SearchNotFound from '../../SearchNotFound';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled('div')(({ theme }) => ({\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  padding: theme.spacing(2, 3)\r\n}));\r\n\r\nconst AutocompleteStyle = styled('div')(({ theme }) => ({\r\n  '& .MuiAutocomplete-root': {\r\n    minWidth: 280,\r\n    marginLeft: theme.spacing(2),\r\n    '&.Mui-focused .MuiAutocomplete-inputRoot': {\r\n      boxShadow: theme.customShadows.z8\r\n    }\r\n  },\r\n  '& .MuiAutocomplete-inputRoot': {\r\n    transition: theme.transitions.create('box-shadow', {\r\n      easing: theme.transitions.easing.easeInOut,\r\n      duration: theme.transitions.duration.shorter\r\n    }),\r\n    '& fieldset': {\r\n      borderWidth: `1px !important`,\r\n      borderColor: `${theme.palette.grey[500_32]} !important`\r\n    }\r\n  }\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChatHeaderCompose.propTypes = {\r\n  contacts: PropTypes.array,\r\n  recipients: PropTypes.array,\r\n  onAddRecipient: PropTypes.func\r\n};\r\n\r\nexport default function ChatHeaderCompose({ contacts, recipients, onAddRecipient, ...other }) {\r\n  const [query, setQuery] = useState('');\r\n\r\n  const handleChangeQuery = (event) => {\r\n    setQuery(event.target.value);\r\n  };\r\n\r\n  const handleAddRecipient = (e, recipient) => {\r\n    setQuery('');\r\n    if (onAddRecipient) {\r\n      onAddRecipient(recipient);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <RootStyle {...other}>\r\n      <Typography variant=\"subtitle2\" sx={{ color: 'text.secondary' }}>\r\n        To:\r\n      </Typography>\r\n\r\n      <AutocompleteStyle>\r\n        <Autocomplete\r\n          multiple\r\n          size=\"small\"\r\n          disablePortal\r\n          popupIcon={null}\r\n          clearText={null}\r\n          noOptionsText={<SearchNotFound searchQuery={query} />}\r\n          onChange={handleAddRecipient}\r\n          onInputChange={handleChangeQuery}\r\n          options={contacts}\r\n          getOptionLabel={(recipient) => recipient.name}\r\n          renderOption={(props, recipient, { inputValue, selected }) => {\r\n            const { name, avatar } = recipient;\r\n            const matches = match(name, inputValue);\r\n            const parts = parse(name, matches);\r\n            return (\r\n              <li {...props}>\r\n                <Box\r\n                  sx={{\r\n                    width: 32,\r\n                    height: 32,\r\n                    overflow: 'hidden',\r\n                    borderRadius: '50%',\r\n                    position: 'relative'\r\n                  }}\r\n                >\r\n                  <Avatar alt={name} src={avatar} />\r\n                  <Box\r\n                    sx={{\r\n                      top: 0,\r\n                      opacity: 0,\r\n                      width: '100%',\r\n                      height: '100%',\r\n                      display: 'flex',\r\n                      position: 'absolute',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center',\r\n                      bgcolor: (theme) => alpha(theme.palette.grey[900], 0.8),\r\n                      transition: (theme) =>\r\n                        theme.transitions.create('opacity', {\r\n                          easing: theme.transitions.easing.easeInOut,\r\n                          duration: theme.transitions.duration.shorter\r\n                        }),\r\n                      ...(selected && {\r\n                        opacity: 1,\r\n                        color: 'primary.main'\r\n                      })\r\n                    }}\r\n                  >\r\n                    <Icon icon={checkmarkFill} width={20} height={20} />\r\n                  </Box>\r\n                </Box>\r\n                <Box sx={{ ml: 2 }} />\r\n                {parts.map((part, index) => (\r\n                  <Typography key={index} variant=\"subtitle2\" color={part.highlight ? 'primary' : 'textPrimary'}>\r\n                    {part.text}\r\n                  </Typography>\r\n                ))}\r\n              </li>\r\n            );\r\n          }}\r\n          renderTags={(recipients, getTagProps) =>\r\n            recipients.map((recipient, index) => {\r\n              const { id, name, avatar } = recipient;\r\n              return (\r\n                <Chip\r\n                  key={id}\r\n                  size=\"small\"\r\n                  label={name}\r\n                  color=\"info\"\r\n                  avatar={<Avatar alt={name} src={avatar} />}\r\n                  {...getTagProps({ index })}\r\n                />\r\n              );\r\n            })\r\n          }\r\n          renderInput={(params) => <TextField {...params} placeholder={recipients.length === 0 ? 'Recipients' : ''} />}\r\n        />\r\n      </AutocompleteStyle>\r\n    </RootStyle>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport { capitalCase } from 'change-case';\r\nimport videoFill from '@iconify/icons-eva/video-fill';\r\nimport phoneFill from '@iconify/icons-eva/phone-fill';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\nimport arrowIosForwardFill from '@iconify/icons-eva/arrow-ios-forward-fill';\r\n// material\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { Box, Link, Avatar, Typography, AvatarGroup } from '@material-ui/core';\r\n// utils\r\nimport { fToNow } from '../../../utils/formatTime';\r\n//\r\nimport { MIconButton } from '../../@material-extend';\r\nimport BadgeStatus from '../../BadgeStatus';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled('div')(({ theme }) => ({\r\n  flexShrink: 0,\r\n  minHeight: 92,\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  padding: theme.spacing(0, 3)\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nOneAvatar.propTypes = {\r\n  participants: PropTypes.array\r\n};\r\n\r\nfunction OneAvatar({ participants }) {\r\n  const participant = [...participants][0];\r\n\r\n  if (participant === undefined) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n      <Box sx={{ position: 'relative' }}>\r\n        <Avatar src={participant.avatar} alt={participant.name} />\r\n        <BadgeStatus status={participant.status} sx={{ position: 'absolute', right: 2, bottom: 2 }} />\r\n      </Box>\r\n      <Box sx={{ ml: 2 }}>\r\n        <Typography variant=\"subtitle2\">{participant.name}</Typography>\r\n        <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n          {participant.status !== 'offline' ? capitalCase(participant.status) : fToNow(participant.lastActivity)}\r\n        </Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nGroupAvatar.propTypes = {\r\n  participants: PropTypes.array\r\n};\r\n\r\nfunction GroupAvatar({ participants }) {\r\n  return (\r\n    <div>\r\n      <AvatarGroup\r\n        max={3}\r\n        sx={{\r\n          mb: 0.5,\r\n          '& .MuiAvatar-root': { width: 32, height: 32 }\r\n        }}\r\n      >\r\n        {participants.map((participant) => (\r\n          <Avatar key={participant.id} alt={participant.name} src={participant.avatar} />\r\n        ))}\r\n      </AvatarGroup>\r\n      <Link variant=\"body2\" underline=\"none\" component=\"button\" color=\"text.secondary\" onClick={() => {}}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n          {participants.length} persons\r\n          <Icon icon={arrowIosForwardFill} />\r\n        </Box>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nChatHeaderDetail.propTypes = {\r\n  participants: PropTypes.array\r\n};\r\n\r\nexport default function ChatHeaderDetail({ participants, ...other }) {\r\n  const isGroup = participants.length > 1;\r\n\r\n  return (\r\n    <RootStyle {...other}>\r\n      {isGroup ? <GroupAvatar participants={participants} /> : <OneAvatar participants={participants} />}\r\n\r\n      <Box sx={{ flexGrow: 1 }} />\r\n      {/* <MIconButton>\r\n        <Icon icon={phoneFill} width={20} height={20} />\r\n      </MIconButton>\r\n      <MIconButton>\r\n        <Icon icon={videoFill} width={20} height={20} />\r\n      </MIconButton> */}\r\n      <MIconButton>\r\n        <Icon icon={moreVerticalFill} width={20} height={20} />\r\n      </MIconButton>\r\n    </RootStyle>\r\n  );\r\n}\r\n","import { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport { useRef, useState } from 'react';\r\nimport micFill from '@iconify/icons-eva/mic-fill';\r\nimport roundSend from '@iconify/icons-ic/round-send';\r\nimport attach2Fill from '@iconify/icons-eva/attach-2-fill';\r\nimport roundAddPhotoAlternate from '@iconify/icons-ic/round-add-photo-alternate';\r\n// material\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { Input, Divider, IconButton, InputAdornment, Stack, Box } from '@material-ui/core';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../../redux/store';\r\nimport {\r\n  addRecipients,\r\n  onSendMessage,\r\n  getConversation,\r\n  getParticipants,\r\n  markConversationAsRead,\r\n  resetActiveConversation\r\n} from '../../../redux/slices/privatechat';\r\nimport axios from '../../../utils/axios';\r\n// hooks\r\nimport useAuth from '../../../hooks/useAuth';\r\n//\r\nimport EmojiPicker from '../../EmojiPicker';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled('div')(({ theme }) => ({\r\n  // minHeight: 56,\r\n  height: 'auto',\r\n  // display: 'flex',\r\n  position: 'relative',\r\n  alignItems: 'center',\r\n  paddingLeft: theme.spacing(2)\r\n}));\r\n\r\nconst MessageImgStyle = styled('img')(({ theme }) => ({\r\n  height: 40,\r\n  minWidth: 40,\r\n  width: 'auto',\r\n  cursor: 'pointer',\r\n  objectFit: 'cover',\r\n  borderRadius: theme.shape.borderRadius\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChatMessageInput.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  conversationId: PropTypes.string,\r\n  opponentId: PropTypes.string,\r\n  onSend: PropTypes.func,\r\n  messageMaxLen: PropTypes.number\r\n};\r\n\r\nexport default function ChatMessageInput({ disabled, conversationId, opponentId, onSend, messageMaxLen, ...other }) {\r\n  const dispatch = useDispatch();\r\n  const fileInputRef = useRef(null);\r\n  const [message, setMessage] = useState('');\r\n  const { user } = useAuth();\r\n  const [imageFiles, setImageFiles] = useState([]);\r\n  const [uploadImgs, setUploadImgs] = useState(null);\r\n\r\n  const handleAttach = () => {\r\n    fileInputRef.current.click();\r\n  };\r\n\r\n  const handleImageUpload = (e) => {\r\n    // console.log(e.target.files);\r\n    const fileObj = [];\r\n    const fileArray = [];\r\n    const formData = new FormData();\r\n    fileObj.push(e.target.files);\r\n    for (let i = 0; i < fileObj[0].length; i += 1) {\r\n      const file = fileObj[0][i];\r\n      formData.append(`img[${i}]`, file, file.name);\r\n      fileArray.push({ index: i, name: file.name, url: URL.createObjectURL(file) });\r\n    }\r\n    // console.log(fileArray);\r\n    setImageFiles(fileArray);\r\n    setUploadImgs(formData);\r\n  };\r\n\r\n  const handleChangeMessage = (event) => {\r\n    setMessage(event.target.value);\r\n  };\r\n\r\n  const handleKeyUp = (event) => {\r\n    if (event.key === 'Enter') {\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  const handleSend = async () => {\r\n    if (!message && imageFiles.length === 0) {\r\n      return '';\r\n    }\r\n    if (onSend) {\r\n      // const accessToken = window.localStorage.getItem('accessToken');\r\n      // const authHeader = {\r\n      //   headers: {\r\n      //     Authorization: `Bearer ${accessToken}`\r\n      //   }\r\n      // };\r\n\r\n      let imgs = [];\r\n\r\n      if (uploadImgs) {\r\n        const res = await axios.post('/message/upload_multi_imgs', uploadImgs);\r\n        imgs = res.data.data;\r\n        setImageFiles([]);\r\n        setUploadImgs(null);\r\n      }\r\n\r\n      onSend({\r\n        conversationId,\r\n        messageId: uuidv4(),\r\n        message,\r\n        imgs,\r\n        senderId: user._id,\r\n        senderName: user.name,\r\n        messageType: 0,\r\n        receiverId: opponentId\r\n      });\r\n    }\r\n    return setMessage('');\r\n  };\r\n\r\n  return (\r\n    <RootStyle {...other}>\r\n      {imageFiles.length > 0 && (\r\n        <Stack direction={{ xs: 'column', sm: 'row' }} sx={{ mt: 1, mb: 1 }} spacing={{ xs: 3, sm: 2 }}>\r\n          {imageFiles.map((img) => (\r\n            <MessageImgStyle key={`${img.index}`} alt=\"attachment\" src={`${img.url}`} />\r\n          ))}\r\n        </Stack>\r\n      )}\r\n      <Stack direction={{ xs: 'column', sm: 'row' }} sx={{ mt: 1, mb: 1 }}>\r\n        <Input\r\n          disabled={disabled}\r\n          fullWidth\r\n          value={message}\r\n          disableUnderline\r\n          onKeyUp={handleKeyUp}\r\n          onChange={handleChangeMessage}\r\n          placeholder=\"Type a message\"\r\n          inputProps={{ maxLength: messageMaxLen || 1000 }}\r\n          startAdornment={\r\n            <InputAdornment position=\"start\">\r\n              <EmojiPicker disabled={disabled} value={message} setValue={setMessage} />\r\n            </InputAdornment>\r\n          }\r\n          endAdornment={\r\n            <Stack direction=\"row\" spacing={0.5} mr={1.5}>\r\n              <IconButton disabled={disabled} size=\"small\" onClick={handleAttach}>\r\n                <Icon icon={roundAddPhotoAlternate} width={24} height={24} />\r\n              </IconButton>\r\n              {/* <IconButton disabled={disabled} size=\"small\" onClick={handleAttach}>\r\n                <Icon icon={attach2Fill} width={24} height={24} />\r\n              </IconButton>\r\n              <IconButton disabled={disabled} size=\"small\">\r\n                <Icon icon={micFill} width={24} height={24} />\r\n              </IconButton> */}\r\n            </Stack>\r\n          }\r\n          sx={{ height: '100%' }}\r\n        />\r\n\r\n        <Divider orientation=\"vertical\" flexItem />\r\n\r\n        <IconButton color=\"primary\" disabled={!message && imageFiles.length === 0} onClick={handleSend} sx={{ mx: 1 }}>\r\n          <Icon icon={roundSend} width={24} height={24} />\r\n        </IconButton>\r\n      </Stack>\r\n\r\n      <input\r\n        type=\"file\"\r\n        multiple\r\n        ref={fileInputRef}\r\n        accept=\"image/*\"\r\n        style={{ display: 'none' }}\r\n        onChange={handleImageUpload}\r\n      />\r\n    </RootStyle>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { formatDistanceToNowStrict } from 'date-fns';\r\n// material\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { Avatar, Box, Typography, Stack } from '@material-ui/core';\r\n\r\nimport useAuth from '../../../hooks/useAuth';\r\n\r\nimport { serverConfig } from '../../../config';\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled('div')(({ theme }) => ({\r\n  display: 'flex',\r\n  marginBottom: theme.spacing(3)\r\n}));\r\n\r\nconst ContentStyle = styled('div')(({ theme }) => ({\r\n  maxWidth: 450,\r\n  padding: theme.spacing(1.5),\r\n  marginTop: theme.spacing(0.5),\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: theme.palette.background.neutral\r\n}));\r\n\r\nconst InfoStyle = styled(Typography)(({ theme }) => ({\r\n  display: 'flex',\r\n  marginBottom: theme.spacing(0.75),\r\n  color: theme.palette.text.secondary\r\n}));\r\n\r\nconst MessageImgStyle = styled('img')(({ theme }) => ({\r\n  height: 80,\r\n  minWidth: 100,\r\n  width: 'auto',\r\n  cursor: 'pointer',\r\n  objectFit: 'cover',\r\n  borderRadius: theme.shape.borderRadius\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChatMessageItem.propTypes = {\r\n  message: PropTypes.object.isRequired,\r\n  conversation: PropTypes.object.isRequired,\r\n  onOpenLightbox: PropTypes.func\r\n};\r\n\r\nexport default function ChatMessageItem({ message, conversation, onOpenLightbox, ...other }) {\r\n  const { user } = useAuth();\r\n  const sender = conversation.users.find((user) => user._id === message.sender_id);\r\n  const senderDetails =\r\n    message.sender_id === user._id\r\n      ? { type: 'me' }\r\n      : { avatar: `${serverConfig.baseUrl}/user/img-src/${sender.avatarUrl}`, name: sender.name };\r\n\r\n  const isMe = senderDetails.type === 'me';\r\n  const firstName = senderDetails.name && senderDetails.name.split(' ')[0];\r\n\r\n  const replaceURLWithHTMLLinks = (text) => {\r\n    const exp = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#/%?=~_|!:,.;]*[-A-Z0-9+&@#/%=~_|])/gim;\r\n    return text.replace(exp, (url) => `<a target=\"_blank\" href=\"${url}\">${url}</a>`);\r\n  };\r\n\r\n  return (\r\n    <RootStyle {...other}>\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          ...(isMe && {\r\n            ml: 'auto'\r\n          })\r\n        }}\r\n      >\r\n        {senderDetails.type !== 'me' && (\r\n          <Avatar alt={senderDetails.name} src={senderDetails.avatar} sx={{ width: 32, height: 32 }} />\r\n        )}\r\n\r\n        <Box sx={{ ml: 2 }}>\r\n          <InfoStyle noWrap variant=\"caption\" sx={{ ...(isMe && { justifyContent: 'flex-end' }) }}>\r\n            {!isMe && `${firstName},`}&nbsp;\r\n            {formatDistanceToNowStrict(new Date(message.createdAt), {\r\n              addSuffix: true\r\n            })}\r\n          </InfoStyle>\r\n\r\n          <ContentStyle\r\n            sx={{\r\n              ...(isMe && {\r\n                color: 'grey.800',\r\n                bgcolor: 'primary.lighter'\r\n              })\r\n            }}\r\n          >\r\n            <Stack spacing={2} dangerouslySetInnerHTML={{ __html: replaceURLWithHTMLLinks(message.message) }} />\r\n            {message.imgs.length > 0 && (\r\n              <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                {message.imgs.map((img) => (\r\n                  <MessageImgStyle\r\n                    key={`${img}`}\r\n                    alt=\"attachment\"\r\n                    src={`${serverConfig.baseUrl}/message/img-src/${img}`}\r\n                    onClick={() => onOpenLightbox(`${serverConfig.baseUrl}/message/img-src/${img}`)}\r\n                  />\r\n                ))}\r\n              </Stack>\r\n            )}\r\n          </ContentStyle>\r\n        </Box>\r\n      </Box>\r\n    </RootStyle>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { findIndex } from 'lodash';\r\nimport { useEffect, useState, useRef } from 'react';\r\n//\r\nimport Scrollbar from '../../Scrollbar';\r\nimport LightboxModal from '../../LightboxModal';\r\nimport ChatMessageItem from './ChatMessageItem';\r\nimport { serverConfig } from '../../../config';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChatMessageList.propTypes = {\r\n  conversation: PropTypes.object.isRequired\r\n};\r\n\r\nexport default function ChatMessageList({ conversation }) {\r\n  const scrollRef = useRef();\r\n  const [openLightbox, setOpenLightbox] = useState(false);\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const scrollMessagesToBottom = () => {\r\n      if (scrollRef.current) {\r\n        scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\r\n      }\r\n    };\r\n    scrollMessagesToBottom();\r\n  }, [conversation.messages]);\r\n\r\n  const images = conversation.messages\r\n    .filter((messages) => messages.imgs.length > 0)\r\n    .map((messages) => messages.imgs)\r\n    .join()\r\n    .split(',')\r\n    .map((img) => `${serverConfig.baseUrl}/message/img-src/${img}`);\r\n\r\n  const handleOpenLightbox = (url) => {\r\n    const selectedImage = findIndex(images, (index) => index === url);\r\n    setOpenLightbox(true);\r\n    setSelectedImage(selectedImage);\r\n  };\r\n\r\n  return (\r\n    <Scrollbar scrollableNodeProps={{ ref: scrollRef }} sx={{ p: 3, flexGrow: 1 }}>\r\n      {conversation.messages.map((message) => (\r\n        <ChatMessageItem\r\n          key={message._id}\r\n          message={message}\r\n          conversation={conversation}\r\n          onOpenLightbox={handleOpenLightbox}\r\n        />\r\n      ))}\r\n\r\n      <LightboxModal\r\n        images={images}\r\n        photoIndex={selectedImage}\r\n        setPhotoIndex={setSelectedImage}\r\n        isOpen={openLightbox}\r\n        onClose={() => setOpenLightbox(false)}\r\n      />\r\n    </Scrollbar>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport { uniq, flatten } from 'lodash';\r\nimport arrowIosForwardFill from '@iconify/icons-eva/arrow-ios-forward-fill';\r\nimport arrowIosDownwardFill from '@iconify/icons-eva/arrow-ios-downward-fill';\r\n// material\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { Box, Button, Divider, Collapse, Typography } from '@material-ui/core';\r\n// utils\r\nimport { fDateTime } from '../../../utils/formatTime';\r\nimport { getFileFullName, getFileThumb } from '../../../utils/getFileFormat';\r\n//\r\nimport Scrollbar from '../../Scrollbar';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled('div')(({ theme }) => ({\r\n  flexGrow: 1,\r\n  height: '100%',\r\n  display: 'flex',\r\n  overflow: 'hidden',\r\n  flexDirection: 'column',\r\n  paddingBottom: theme.spacing(2)\r\n}));\r\n\r\nconst FileItemStyle = styled('div')(({ theme }) => ({\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  marginTop: theme.spacing(2),\r\n  padding: theme.spacing(0, 2.5)\r\n}));\r\n\r\nconst FileThumbStyle = styled('div')(({ theme }) => ({\r\n  width: 40,\r\n  height: 40,\r\n  flexShrink: 0,\r\n  display: 'flex',\r\n  overflow: 'hidden',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  color: theme.palette.text.secondary,\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: theme.palette.grey[500_16]\r\n}));\r\n\r\nconst CollapseButtonStyle = styled(Button)(({ theme }) => ({\r\n  ...theme.typography.overline,\r\n  height: 40,\r\n  flexShrink: 0,\r\n  borderRadius: 0,\r\n  padding: theme.spacing(1, 2),\r\n  justifyContent: 'space-between',\r\n  color: theme.palette.text.disabled\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nAttachmentItem.propTypes = {\r\n  file: PropTypes.object,\r\n  fileUrl: PropTypes.string\r\n};\r\n\r\nfunction AttachmentItem({ file, fileUrl }) {\r\n  return (\r\n    <FileItemStyle key={fileUrl}>\r\n      <FileThumbStyle>{getFileThumb(fileUrl)}</FileThumbStyle>\r\n      <Box sx={{ ml: 1.5, maxWidth: 150 }}>\r\n        <Typography variant=\"body2\" noWrap>\r\n          {getFileFullName(fileUrl)}\r\n        </Typography>\r\n        <Typography noWrap variant=\"caption\" sx={{ color: 'text.secondary', display: 'block' }}>\r\n          {fDateTime(file.createdAt)}\r\n        </Typography>\r\n      </Box>\r\n    </FileItemStyle>\r\n  );\r\n}\r\n\r\nChatRoomAttachment.propTypes = {\r\n  conversation: PropTypes.object.isRequired,\r\n  isCollapse: PropTypes.bool,\r\n  onCollapse: PropTypes.func\r\n};\r\n\r\nexport default function ChatRoomAttachment({ conversation, isCollapse, onCollapse, ...other }) {\r\n  const totalAttachment = uniq(flatten(conversation.messages.map((item) => item.attachments))).length;\r\n\r\n  return (\r\n    <RootStyle {...other}>\r\n      <CollapseButtonStyle\r\n        fullWidth\r\n        color=\"inherit\"\r\n        onClick={onCollapse}\r\n        endIcon={<Icon icon={isCollapse ? arrowIosDownwardFill : arrowIosForwardFill} width={16} height={16} />}\r\n      >\r\n        attachment ({totalAttachment})\r\n      </CollapseButtonStyle>\r\n\r\n      {!isCollapse && <Divider />}\r\n\r\n      <Scrollbar>\r\n        <Collapse in={isCollapse}>\r\n          {conversation.messages.map((file) => (\r\n            <div key={file.id}>\r\n              {file.attachments.map((fileUrl) => (\r\n                <AttachmentItem key={fileUrl} file={file} fileUrl={fileUrl} />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </Collapse>\r\n      </Scrollbar>\r\n    </RootStyle>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport pinFill from '@iconify/icons-eva/pin-fill';\r\nimport phoneFill from '@iconify/icons-eva/phone-fill';\r\nimport emailFill from '@iconify/icons-eva/email-fill';\r\nimport arrowIosForwardFill from '@iconify/icons-eva/arrow-ios-forward-fill';\r\nimport arrowIosDownwardFill from '@iconify/icons-eva/arrow-ios-downward-fill';\r\n// material\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { Box, Avatar, Button, Divider, Collapse, Typography, Stack } from '@material-ui/core';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst CollapseButtonStyle = styled(Button)(({ theme }) => ({\r\n  ...theme.typography.overline,\r\n  height: 40,\r\n  borderRadius: 0,\r\n  padding: theme.spacing(1, 2),\r\n  justifyContent: 'space-between',\r\n  color: theme.palette.text.disabled\r\n}));\r\n\r\nconst RowIconStyle = styled(Icon)(({ theme }) => ({\r\n  width: 16,\r\n  height: 16,\r\n  marginTop: 4,\r\n  color: theme.palette.text.secondary\r\n}));\r\n\r\nconst RowTextStyle = styled(Typography)(({ theme }) => ({\r\n  flexGrow: 1,\r\n  maxWidth: 160,\r\n  wordWrap: 'break-word',\r\n  ...theme.typography.body2\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChatRoomOneParticipant.propTypes = {\r\n  participants: PropTypes.array.isRequired,\r\n  isCollapse: PropTypes.bool,\r\n  onCollapse: PropTypes.func\r\n};\r\n\r\nexport default function ChatRoomOneParticipant({ participants, isCollapse, onCollapse, ...other }) {\r\n  const participant = [...participants][0];\r\n\r\n  if (participant === undefined) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Box {...other}>\r\n      <Box\r\n        sx={{\r\n          pt: 4,\r\n          pb: 3,\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          flexDirection: 'column'\r\n        }}\r\n      >\r\n        <Avatar alt={participant.name} src={participant.avatar} sx={{ width: 96, height: 96 }} />\r\n        <Box sx={{ mt: 2, textAlign: 'center' }}>\r\n          <Typography variant=\"subtitle1\">{participant.name}</Typography>\r\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n            {participant.position}\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Divider />\r\n\r\n      <CollapseButtonStyle\r\n        fullWidth\r\n        color=\"inherit\"\r\n        onClick={onCollapse}\r\n        endIcon={<Icon icon={isCollapse ? arrowIosDownwardFill : arrowIosForwardFill} width={16} height={16} />}\r\n      >\r\n        information\r\n      </CollapseButtonStyle>\r\n\r\n      <Collapse in={isCollapse}>\r\n        <Stack spacing={2} sx={{ p: 2.5, pt: 1 }}>\r\n          <Stack direction=\"row\" spacing={1}>\r\n            <RowIconStyle icon={pinFill} />\r\n            <RowTextStyle>{participant.address}</RowTextStyle>\r\n          </Stack>\r\n          <Stack direction=\"row\" spacing={1}>\r\n            <RowIconStyle icon={phoneFill} />\r\n            <RowTextStyle>{participant.phone}</RowTextStyle>\r\n          </Stack>\r\n          <Stack direction=\"row\" spacing={1}>\r\n            <RowIconStyle icon={emailFill} />\r\n            <RowTextStyle>{participant.email}</RowTextStyle>\r\n          </Stack>\r\n        </Stack>\r\n      </Collapse>\r\n    </Box>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport pinFill from '@iconify/icons-eva/pin-fill';\r\nimport phoneFill from '@iconify/icons-eva/phone-fill';\r\nimport emailFill from '@iconify/icons-eva/email-fill';\r\n// material\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { Avatar, Typography, DialogContent } from '@material-ui/core';\r\n//\r\nimport { DialogAnimate } from '../../animate';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RowStyle = styled('div')(({ theme }) => ({\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  marginTop: theme.spacing(1.5)\r\n}));\r\n\r\nconst IconStyle = styled(Icon)(({ theme }) => ({\r\n  width: 16,\r\n  height: 16,\r\n  marginRight: theme.spacing(1),\r\n  color: theme.palette.text.secondary\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChatRoomPopup.propTypes = {\r\n  participant: PropTypes.object,\r\n  isOpen: PropTypes.bool,\r\n  onClose: PropTypes.func\r\n};\r\n\r\nexport default function ChatRoomPopup({ participant, isOpen, onClose, ...other }) {\r\n  const { name, avatar, position, address, phone, email } = participant;\r\n\r\n  return (\r\n    <DialogAnimate fullWidth maxWidth=\"xs\" open={isOpen} onClose={onClose} {...other}>\r\n      <DialogContent sx={{ pb: 5, textAlign: 'center' }}>\r\n        <Avatar\r\n          alt={name}\r\n          src={avatar}\r\n          sx={{\r\n            mt: 5,\r\n            mb: 2,\r\n            mx: 'auto',\r\n            width: 96,\r\n            height: 96\r\n          }}\r\n        />\r\n        <Typography variant=\"h6\">{name}</Typography>\r\n        <Typography variant=\"body2\" paragraph sx={{ color: 'text.secondary' }}>\r\n          {position}\r\n        </Typography>\r\n\r\n        <RowStyle>\r\n          <IconStyle icon={pinFill} />\r\n          <Typography variant=\"body2\">{address}</Typography>\r\n        </RowStyle>\r\n        <RowStyle>\r\n          <IconStyle icon={phoneFill} />\r\n          <Typography variant=\"body2\">{phone}</Typography>\r\n        </RowStyle>\r\n        <RowStyle>\r\n          <IconStyle icon={emailFill} />\r\n          <Typography variant=\"body2\">{email}</Typography>\r\n        </RowStyle>\r\n      </DialogContent>\r\n    </DialogAnimate>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport arrowIosForwardFill from '@iconify/icons-eva/arrow-ios-forward-fill';\r\nimport arrowIosDownwardFill from '@iconify/icons-eva/arrow-ios-downward-fill';\r\n// material\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { Box, List, Avatar, Button, Collapse, ListItemText, ListItemAvatar, ListItemButton } from '@material-ui/core';\r\n//\r\nimport Scrollbar from '../../Scrollbar';\r\nimport BadgeStatus from '../../BadgeStatus';\r\nimport ChatRoomPopup from './ChatRoomPopup';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst HEIGHT = 64;\r\n\r\nconst CollapseButtonStyle = styled(Button)(({ theme }) => ({\r\n  ...theme.typography.overline,\r\n  height: 40,\r\n  borderRadius: 0,\r\n  padding: theme.spacing(1, 2),\r\n  justifyContent: 'space-between',\r\n  color: theme.palette.text.disabled\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nParticipant.propTypes = {\r\n  participant: PropTypes.object.isRequired,\r\n  isOpen: PropTypes.bool,\r\n  onClosePopup: PropTypes.func,\r\n  onShowPopup: PropTypes.func\r\n};\r\n\r\nfunction Participant({ participant, isOpen, onClosePopup, onShowPopup }) {\r\n  const { name, avatar, status, position } = participant;\r\n\r\n  return (\r\n    <>\r\n      <ListItemButton disableGutters onClick={onShowPopup} sx={{ height: HEIGHT, px: 2.5 }}>\r\n        <ListItemAvatar>\r\n          <Box sx={{ position: 'relative', width: 40, height: 40 }}>\r\n            <Avatar alt={name} src={avatar} />\r\n            <BadgeStatus status={status} sx={{ right: 0, bottom: 0, position: 'absolute' }} />\r\n          </Box>\r\n        </ListItemAvatar>\r\n        <ListItemText\r\n          primary={name}\r\n          secondary={position}\r\n          primaryTypographyProps={{ variant: 'subtitle2', noWrap: true }}\r\n          secondaryTypographyProps={{ noWrap: true }}\r\n        />\r\n      </ListItemButton>\r\n      <ChatRoomPopup participant={participant} isOpen={isOpen} onClose={onClosePopup} />\r\n    </>\r\n  );\r\n}\r\n\r\nChatRoomGroupParticipant.propTypes = {\r\n  participants: PropTypes.array.isRequired,\r\n  selectUserId: PropTypes.string,\r\n  onShowPopupUserInfo: PropTypes.func,\r\n  isCollapse: PropTypes.bool,\r\n  onCollapse: PropTypes.func\r\n};\r\n\r\nexport default function ChatRoomGroupParticipant({\r\n  participants,\r\n  selectUserId,\r\n  onShowPopupUserInfo,\r\n  isCollapse,\r\n  onCollapse,\r\n  ...other\r\n}) {\r\n  return (\r\n    <Box {...other}>\r\n      <CollapseButtonStyle\r\n        fullWidth\r\n        disableRipple\r\n        color=\"inherit\"\r\n        onClick={onCollapse}\r\n        endIcon={<Icon icon={isCollapse ? arrowIosDownwardFill : arrowIosForwardFill} width={16} height={16} />}\r\n      >\r\n        In room ({participants.length})\r\n      </CollapseButtonStyle>\r\n\r\n      <Box sx={{ height: isCollapse ? HEIGHT * 4 : 0 }}>\r\n        <Scrollbar>\r\n          <Collapse in={isCollapse}>\r\n            <List disablePadding>\r\n              {participants.map((participant) => (\r\n                <Participant\r\n                  key={participant.id}\r\n                  participant={participant}\r\n                  isOpen={selectUserId === participant.id}\r\n                  onShowPopup={() => onShowPopupUserInfo(participant.id)}\r\n                  onClosePopup={() => onShowPopupUserInfo(null)}\r\n                />\r\n              ))}\r\n            </List>\r\n          </Collapse>\r\n        </Scrollbar>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport { useState, useEffect } from 'react';\r\nimport arrowIosBackFill from '@iconify/icons-eva/arrow-ios-back-fill';\r\nimport arrowIosForwardFill from '@iconify/icons-eva/arrow-ios-forward-fill';\r\n// material\r\nimport { useTheme, styled } from '@material-ui/core/styles';\r\nimport { useMediaQuery, Divider, IconButton } from '@material-ui/core';\r\n//\r\nimport ChatRoomAttachment from './ChatRoomAttachment';\r\nimport ChatRoomOneParticipant from './ChatRoomOneParticipant';\r\nimport ChatRoomGroupParticipant from './ChatRoomGroupParticipant';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled('div')(({ theme }) => ({\r\n  width: 240,\r\n  flexShrink: 0,\r\n  display: 'flex',\r\n  position: 'relative',\r\n  flexDirection: 'column',\r\n  borderLeft: `solid 1px ${theme.palette.divider}`,\r\n  transition: theme.transitions.create('width')\r\n}));\r\n\r\nconst ToggleButtonStyle = styled('div')(({ theme }) => ({\r\n  borderRight: 0,\r\n  display: 'flex',\r\n  overflow: 'hidden',\r\n  position: 'absolute',\r\n  alignItems: 'center',\r\n  top: theme.spacing(1),\r\n  left: theme.spacing(-4),\r\n  width: theme.spacing(4),\r\n  height: theme.spacing(4),\r\n  justifyContent: 'center',\r\n  boxShadow: theme.customShadows.z8,\r\n  border: `solid 1px ${theme.palette.divider}`,\r\n  borderTopLeftRadius: theme.shape.borderRadius,\r\n  backgroundColor: theme.palette.background.paper,\r\n  borderBottomLeftRadius: theme.shape.borderRadius\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChatRoom.propTypes = {\r\n  conversation: PropTypes.object.isRequired,\r\n  participants: PropTypes.array.isRequired\r\n};\r\n\r\nexport default function ChatRoom({ conversation, participants, ...other }) {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('lg'));\r\n  const [openSidebar, setOpenSidebar] = useState(true);\r\n  const [showInfo, setShowInfo] = useState(true);\r\n  const [selectUser, setSelectUser] = useState(null);\r\n  const [showAttachment, setShowAttachment] = useState(true);\r\n  const [showParticipants, setShowParticipants] = useState(true);\r\n  const isGroup = participants.length > 1;\r\n\r\n  useEffect(() => {\r\n    if (isMobile) {\r\n      return setOpenSidebar(false);\r\n    }\r\n    return setOpenSidebar(true);\r\n  }, [isMobile]);\r\n\r\n  return (\r\n    <RootStyle\r\n      sx={{\r\n        ...(!openSidebar && {\r\n          width: 0,\r\n          '& > *': { overflow: 'hidden' }\r\n        })\r\n      }}\r\n      {...other}\r\n    >\r\n      <ToggleButtonStyle>\r\n        <IconButton onClick={() => setOpenSidebar(!openSidebar)}>\r\n          <Icon width={16} height={16} icon={openSidebar ? arrowIosForwardFill : arrowIosBackFill} />\r\n        </IconButton>\r\n      </ToggleButtonStyle>\r\n\r\n      {isGroup ? (\r\n        <ChatRoomGroupParticipant\r\n          selectUserId={selectUser}\r\n          participants={participants}\r\n          isCollapse={showParticipants}\r\n          onShowPopupUserInfo={(participantId) => setSelectUser(participantId)}\r\n          onCollapse={() => setShowParticipants((prev) => !prev)}\r\n        />\r\n      ) : (\r\n        <ChatRoomOneParticipant\r\n          participants={participants}\r\n          isCollapse={showInfo}\r\n          onCollapse={() => setShowInfo((prev) => !prev)}\r\n        />\r\n      )}\r\n      <Divider />\r\n\r\n      {/* <ChatRoomAttachment\r\n        conversation={conversation}\r\n        isCollapse={showAttachment}\r\n        onCollapse={() => setShowAttachment((prev) => !prev)}\r\n      /> */}\r\n    </RootStyle>\r\n  );\r\n}\r\n","import { Icon } from '@iconify/react';\r\nimport { useState, useEffect } from 'react';\r\nimport editFill from '@iconify/icons-eva/edit-fill';\r\n\r\nimport { useNavigate, Link as RouterLink } from 'react-router-dom';\r\nimport arrowIosBackFill from '@iconify/icons-eva/arrow-ios-back-fill';\r\nimport arrowIosForwardFill from '@iconify/icons-eva/arrow-ios-forward-fill';\r\n// material\r\nimport { useTheme, styled } from '@material-ui/core/styles';\r\nimport { Box, useMediaQuery, Checkbox, FormControlLabel } from '@material-ui/core';\r\n// redux\r\nimport { useSelector } from '../../../redux/store';\r\n// utils\r\nimport axios from '../../../utils/axios';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n\r\nimport { MIconButton } from '../../@material-extend';\r\nimport Scrollbar from '../../Scrollbar';\r\nimport ChatAccount from './ChatAccount';\r\nimport ChatSearchResults from './ChatSearchResults';\r\nimport ChatContactSearch from './ChatContactSearch';\r\nimport ChatConversationList from './ChatConversationList';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled('div')(({ theme }) => ({\r\n  width: 320,\r\n  flexShrink: 0,\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  transition: theme.transitions.create('width'),\r\n  borderRight: `1px solid ${theme.palette.divider}`\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function ChatSidebar() {\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\r\n  const [openSidebar, setOpenSidebar] = useState(true);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [isSearchFocused, setSearchFocused] = useState(false);\r\n  const displayResults = searchQuery && isSearchFocused;\r\n  const { conversations, activeConversationId } = useSelector((state) => state.privatechat);\r\n  const [onlyUnreadShow, setOnlyUnreadShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isMobile) {\r\n      return setOpenSidebar(false);\r\n    }\r\n    return setOpenSidebar(true);\r\n  }, [isMobile]);\r\n\r\n  // eslint-disable-next-line consistent-return\r\n  useEffect(() => {\r\n    if (!openSidebar) {\r\n      return setSearchFocused(false);\r\n    }\r\n  }, [openSidebar]);\r\n\r\n  const handleClickAwaySearch = () => {\r\n    setSearchFocused(false);\r\n    setSearchQuery('');\r\n  };\r\n\r\n  const handleChangeSearch = async (event) => {\r\n    try {\r\n      const { value } = event.target;\r\n      setSearchQuery(value);\r\n      if (value) {\r\n        const response = await axios.get('/chat/search', {\r\n          params: { query: value }\r\n        });\r\n        setSearchResults(response.data.results);\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleSearchFocus = () => {\r\n    setSearchFocused(true);\r\n  };\r\n\r\n  const handleSearchSelect = (username) => {\r\n    setSearchFocused(false);\r\n    setSearchQuery('');\r\n    navigate(`${PATH_DASHBOARD.chat.root}/${username}`);\r\n  };\r\n\r\n  const handleSelectContact = (result) => {\r\n    if (handleSearchSelect) {\r\n      handleSearchSelect(result.username);\r\n    }\r\n  };\r\n\r\n  const handleUnreadShowChange = (e) => {\r\n    setOnlyUnreadShow(e.target.checked);\r\n  };\r\n\r\n  return (\r\n    <RootStyle sx={{ ...(!openSidebar && { width: 96 }) }}>\r\n      <Box sx={{ py: 2, px: 3 }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n          {openSidebar && (\r\n            <>\r\n              <Box sx={{ flexGrow: 1 }} />\r\n            </>\r\n          )}\r\n\r\n          <MIconButton onClick={() => setOpenSidebar(!openSidebar)}>\r\n            <Icon width={20} height={20} icon={openSidebar ? arrowIosBackFill : arrowIosForwardFill} />\r\n          </MIconButton>\r\n        </Box>\r\n\r\n        {openSidebar && (\r\n          <Box>\r\n            <ChatContactSearch\r\n              query={searchQuery}\r\n              onFocus={handleSearchFocus}\r\n              onChange={handleChangeSearch}\r\n              onClickAway={handleClickAwaySearch}\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox checked={onlyUnreadShow} onChange={handleUnreadShowChange} />}\r\n              label=\"display unread chat partner only\"\r\n            />\r\n          </Box>\r\n        )}\r\n      </Box>\r\n\r\n      <Scrollbar>\r\n        {/* {!displayResults ? ( */}\r\n        <ChatConversationList\r\n          conversations={conversations}\r\n          isOpenSidebar={openSidebar}\r\n          activeConversationId={activeConversationId}\r\n          // sx={{ ...(isSearchFocused && { display: 'none' }) }}\r\n          query={searchQuery}\r\n          onlyUnreadShow={onlyUnreadShow}\r\n        />\r\n        {/* ) : (\r\n          <ChatSearchResults query={searchQuery} results={searchResults} onSelectContact={handleSelectContact} />\r\n        )} */}\r\n      </Scrollbar>\r\n    </RootStyle>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\n// material\r\nimport { Box, Divider } from '@material-ui/core';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../../redux/store';\r\nimport {\r\n  addRecipients,\r\n  onSendMessage,\r\n  getConversation,\r\n  getParticipants,\r\n  markConversationAsRead,\r\n  resetActiveConversation\r\n} from '../../../redux/slices/privatechat';\r\nimport { getSettingsList } from '../../../redux/slices/settings';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n//\r\n// import ChatRoom from './ChatRoom';\r\nimport ChatMessageList from './ChatMessageList';\r\nimport ChatHeaderDetail from './ChatHeaderDetail';\r\nimport ChatMessageInput from './ChatMessageInput';\r\nimport ChatHeaderCompose from './ChatHeaderCompose';\r\n// hooks\r\nimport useAuth from '../../../hooks/useAuth';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst conversationSelector = (state) => {\r\n  const { conversations, activeConversationId } = state.privatechat;\r\n  const conversation = conversations.byId[activeConversationId];\r\n  if (conversation) {\r\n    return conversation;\r\n  }\r\n  return {\r\n    id: null,\r\n    messages: [],\r\n    lastMessage: null,\r\n    users: []\r\n  };\r\n};\r\n\r\nexport default function ChatWindow({ socket }) {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const { user } = useAuth();\r\n  const { pathname } = useLocation();\r\n  const { opponentId } = useParams();\r\n  const { contacts, recipients, participants, activeConversationId } = useSelector((state) => state.privatechat);\r\n  const conversation = useSelector((state) => conversationSelector(state));\r\n\r\n  const { settingsList } = useSelector((state) => state.setting);\r\n  const parameterSettings = settingsList.find((settingRow) => settingRow.type === 'parameter');\r\n\r\n  useEffect(() => {\r\n    dispatch(getSettingsList());\r\n  }, [dispatch]);\r\n\r\n  const mode = opponentId ? 'DETAIL' : 'COMPOSE';\r\n\r\n  const displayParticipants = participants.filter((item) => item._id !== '8864c717-587d-472a-929a-8e5f298024da-0');\r\n\r\n  useEffect(() => {\r\n    if (activeConversationId) {\r\n      console.log('get conversation', activeConversationId);\r\n      dispatch(getConversation(activeConversationId));\r\n      // dispatch(markConversationAsRead(activeConversationId));\r\n    }\r\n  }, [dispatch, activeConversationId]);\r\n\r\n  useEffect(() => {\r\n    // console.log(conversation);\r\n    if (conversation.lastMessage && conversation.lastMessage.users_see_message.indexOf(user._id) === -1) {\r\n      socket.emit('makeLastMessageAsSeen', JSON.stringify({ chatId: activeConversationId, userId: user._id }));\r\n    }\r\n  }, [dispatch, conversation]);\r\n\r\n  const handleAddRecipient = (recipient) => {\r\n    dispatch(addRecipients(recipient));\r\n  };\r\n\r\n  const handleSendMessage = async (value) => {\r\n    try {\r\n      dispatch(onSendMessage(value));\r\n      const message = {\r\n        sender_id: value.senderId,\r\n        sender_name: value.senderName,\r\n        messageId: value.messageId,\r\n        chat_id: value.conversationId,\r\n        message: value.message,\r\n        receiver_id: value.receiverId,\r\n        message_type: value.messageType,\r\n        imgs: value.imgs\r\n      };\r\n      console.log('socket new message', message);\r\n      socket.emit('new_message', JSON.stringify(message));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>\r\n      {/* {mode === 'DETAIL' ? (\r\n        <ChatHeaderDetail participants={displayParticipants} />\r\n      ) : (\r\n        <ChatHeaderCompose\r\n          recipients={recipients}\r\n          contacts={Object.values(contacts.byId)}\r\n          onAddRecipient={handleAddRecipient}\r\n        />\r\n      )} */}\r\n      <ChatHeaderDetail participants={displayParticipants} />\r\n\r\n      <Divider />\r\n\r\n      <Box sx={{ flexGrow: 1, display: 'flex', overflow: 'hidden' }}>\r\n        <Box sx={{ display: 'flex', flexGrow: 1, flexDirection: 'column' }}>\r\n          <ChatMessageList conversation={conversation} />\r\n\r\n          <Divider />\r\n\r\n          <ChatMessageInput\r\n            conversationId={activeConversationId}\r\n            opponentId={opponentId}\r\n            onSend={handleSendMessage}\r\n            disabled={pathname === PATH_DASHBOARD.chat.private}\r\n            messageMaxLen={parameterSettings && Number(parameterSettings.settings.message_limit_character_num)}\r\n          />\r\n        </Box>\r\n\r\n        {/* {mode === 'DETAIL' && <ChatRoom conversation={conversation} participants={displayParticipants} />} */}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport { useSnackbar } from 'notistack5';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, FormikProvider, useFormik } from 'formik';\r\n// material\r\nimport { LoadingButton } from '@material-ui/lab';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Grid,\r\n  Stack,\r\n  Switch,\r\n  TextField,\r\n  Typography,\r\n  FormHelperText,\r\n  FormControlLabel\r\n} from '@material-ui/core';\r\n// utils\r\nimport axios from '../../../utils/axios';\r\nimport fakeRequest from '../../../utils/fakeRequest';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChatAdminMessageForm.propTypes = {\r\n  chatSettings: PropTypes.object\r\n};\r\n\r\nexport default function ChatAdminMessageForm({ chatSettings }) {\r\n  const navigate = useNavigate();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const ChatAdminMessageSchema = Yup.object().shape({\r\n    admin_message: Yup.string().required('This field is required')\r\n  });\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      admin_message:\r\n        chatSettings?.settings.admin_message ||\r\n        'Please leave a message, I will reply to you as soon as possible. You may talk about anything: advertising, complaining, suggestions, advice, cooperation, etc.'\r\n    },\r\n    validationSchema: ChatAdminMessageSchema,\r\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\r\n      try {\r\n        await fakeRequest(500);\r\n\r\n        await axios.put(`/settings/chat`, values);\r\n\r\n        setSubmitting(false);\r\n        enqueueSnackbar('Update success', { variant: 'success' });\r\n      } catch (error) {\r\n        console.error(error);\r\n        setSubmitting(false);\r\n        setErrors(error);\r\n      }\r\n    }\r\n  });\r\n\r\n  const { errors, values, touched, handleSubmit, isSubmitting, setFieldValue, getFieldProps } = formik;\r\n\r\n  return (\r\n    <FormikProvider value={formik}>\r\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={12}>\r\n            <Card sx={{ p: 3 }}>\r\n              <Stack spacing={3}>\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Admin Message\"\r\n                    multiline\r\n                    minRows={2}\r\n                    maxRows={4}\r\n                    {...getFieldProps('admin_message')}\r\n                    error={Boolean(touched.message && errors.message)}\r\n                    helperText={touched.message && errors.message}\r\n                  />\r\n                  <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n                    Save\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Stack>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Form>\r\n    </FormikProvider>\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport socketio from 'socket.io-client';\r\n// material\r\nimport { Card, Container } from '@material-ui/core';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getUserList } from '../../redux/slices/user';\r\nimport { getConversations, getContacts, onConnectChat, getConversation } from '../../redux/slices/privatechat';\r\nimport { getSettingsList } from '../../redux/slices/settings';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport useSettings from '../../hooks/useSettings';\r\nimport useAuth from '../../hooks/useAuth';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport { ChatSidebar, ChatWindow, ChatAdminMessageForm } from '../../components/_dashboard/privatechat';\r\nimport { serverConfig } from '../../config';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function PrivateChat() {\r\n  const { themeStretch } = useSettings();\r\n  const dispatch = useDispatch();\r\n  const { user } = useAuth();\r\n  const { opponentId } = useParams();\r\n  const { settingsList } = useSelector((state) => state.setting);\r\n  const chatSettings = settingsList.find((settingRow) => settingRow.type === 'chat');\r\n  const { activeConversationId } = useSelector((state) => state.privatechat);\r\n  const [currentConversationId, setCurrentCoversationId] = useState(null);\r\n\r\n  console.log('Private Chat');\r\n\r\n  useEffect(() => {\r\n    if (opponentId) {\r\n      const lastMessage =\r\n        chatSettings?.settings.admin_message ||\r\n        'Please leave a message, I will reply to you as soon as possible. You may talk about anything: advertising, complaining, suggestions, advice, cooperation, etc.';\r\n      dispatch(onConnectChat(user._id, opponentId, lastMessage));\r\n    }\r\n  }, [dispatch, opponentId]);\r\n\r\n  useEffect(() => {\r\n    dispatch(getUserList());\r\n    dispatch(getConversations());\r\n    dispatch(getContacts());\r\n    dispatch(getSettingsList());\r\n  }, [dispatch]);\r\n\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const newSocket = socketio.connect(`${serverConfig.socketUrl}/api/message`, {\r\n      // EIO: 2,\r\n      // reconnect: true,\r\n      transports: ['websocket']\r\n    });\r\n    newSocket.on('connect', () => {\r\n      console.log('Successfully connected');\r\n    });\r\n    newSocket.on('connect_failed', () => {\r\n      console.log('Connection Failed');\r\n    });\r\n    newSocket.on('disconnect', () => {\r\n      console.log('Disconnected');\r\n    });\r\n    newSocket.on('msgReceive', handleReceiveMessage);\r\n    newSocket.on('onDeleted', handleDeleteMessage);\r\n    newSocket.on('onTyping', onTyping);\r\n    setSocket(newSocket);\r\n    return () => newSocket.close();\r\n  }, [setSocket]);\r\n\r\n  useEffect(() => {\r\n    if (socket && activeConversationId) {\r\n      if (currentConversationId && currentConversationId !== activeConversationId) {\r\n        console.log('leaveChat', currentConversationId);\r\n        socket.emit(\r\n          'leaveChat',\r\n          JSON.stringify({\r\n            chatId: currentConversationId\r\n          })\r\n        );\r\n      }\r\n      console.log('joinChat', activeConversationId);\r\n      const params = { chatId: activeConversationId };\r\n      socket.emit('joinChat', JSON.stringify(params));\r\n      setCurrentCoversationId(activeConversationId);\r\n    }\r\n  }, [socket, dispatch, activeConversationId]);\r\n\r\n  const handleReceiveMessage = async (value) => {\r\n    console.log(activeConversationId, value);\r\n    if (activeConversationId) {\r\n      dispatch(getConversation(activeConversationId));\r\n    }\r\n  };\r\n\r\n  const handleDeleteMessage = async (value) => {\r\n    console.log(value);\r\n    dispatch(getConversation(activeConversationId));\r\n  };\r\n\r\n  const onTyping = async (value) => {\r\n    console.log(value);\r\n  };\r\n\r\n  const [roomListSocket, setRoomListSocket] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log('RoomList Socket!');\r\n    const newSocket = socketio.connect(`${serverConfig.socketUrl}/api/chatRoomList`, {\r\n      // reconnect: true,\r\n      transports: ['websocket']\r\n    });\r\n    newSocket.on('connect', () => {\r\n      console.log('Successfully connected: api/chatRoomList');\r\n    });\r\n    newSocket.on('updateChatRoomList', handleUpdateChatRoomList);\r\n    setRoomListSocket(newSocket);\r\n    return () => newSocket.close();\r\n  }, [setRoomListSocket]);\r\n\r\n  const handleUpdateChatRoomList = () => {\r\n    console.log('handleUpdateChatRoomList');\r\n    dispatch(getConversations());\r\n  };\r\n\r\n  return (\r\n    <Page title=\"Chat | Locals\">\r\n      <Container maxWidth={themeStretch ? false : 'xl'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"Private Chat\"\r\n          links={[{ name: 'Dashboard', href: PATH_DASHBOARD.root }, { name: 'Private Chat' }]}\r\n        />\r\n        <ChatAdminMessageForm chatSettings={chatSettings} />\r\n        <Card sx={{ height: '72vh', display: 'flex' }}>\r\n          <ChatSidebar />\r\n          {socket && <ChatWindow socket={socket} />}\r\n        </Card>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"],"sourceRoot":""}